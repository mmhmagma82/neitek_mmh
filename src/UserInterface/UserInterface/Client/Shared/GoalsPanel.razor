@inject HttpClient _client

@if (_getGoals.Count() == 0 && _findGoals == false)
{
    <Alert Color="AlertColor.Success">
        <h4 class="alert-heading">¡Buscando metas!</h4>
        <p>Por favor espere...</p>
    </Alert>
}
else
{
    <div class="row">
        <div class="col-4" style="padding:10px; background-color:white;">
            <button type="button" class="btn btn-success btn-sm" style="background-color:#336666 !important;" @onclick="OnNewGoalClick">
                <span class="oi oi-plus"></span>&nbsp;&nbsp;Nueva meta
            </button>
            <br /><br />
            @if (_getGoals.Count > 0)
            {
                <div class="list-group">
                    @foreach (var goalData in _getGoals)
                    {
                        <a href="#" class="list-group-item list-group-item-action" @onclick="() => SelectedGoal(goalData)">
                            <div class="row">
                                <div class="col-10" style="padding:5px; font-weight:bolder;">
                                    @goalData.Name
                                </div>
                                <div class="col-2" style="padding:5px; text-align:right;">
                                    <span class="oi oi-pencil" style="cursor:pointer;" @onclick="() => OnEditGoalClick(goalData)"></span>&nbsp&nbsp
                                    <span class="oi oi-trash" style="cursor:pointer;" @onclick="() => OnRemoveGoalClick(goalData)"></span>
                                </div>
                                <div class="col-12 text-black" style="padding:5px; padding-left:15px; font-size:.9em;">
                                    Fecha creada:  @goalData.RegisterDate.ToString("dd/MM/yyyy")
                                </div>
                                <div class="col-10 text-black-50" style="padding:5px; font-size:.8em;">
                                    Tareas completadas: @goalData.CompleteTasks/@goalData.Tasks
                                </div>
                                <div class="col-2" style="padding:5px; text-align:right; font-size:.8em;">
                                    @if (goalData.Progress > 0)
                                    {
                                        <span>@goalData.Progress%</span>
                                    }
                                    else
                                    {
                                        <span>0%</span>
                                    }
                                </div>
                                <div class="col-12 text-black" style="padding:5px; padding-left:15px; font-size:.9em;">
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @goalData.Progress%" aria-valuenow="@goalData.Progress" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div>
                        </a>
                    }
                </div>
            }
        </div>

        <div class="col-8" style="padding:5px; background-color:white;">
            @if (_getTasks == null)
            {
                <Alert Color="AlertColor.Warning"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>Buscando tareas, por favor espere... </Alert>
            }
            else
            {
                if(_getGoals.Count() >0)
                {
                    <div class="col-12" style="margin-bottom:20px;">
                        <button type="button" class="btn btn-success btn-sm" style="background-color:#336666 !important;" @onclick="OnNewTaskClick">
                            <span class="oi oi-plus"></span>&nbsp;&nbsp;Agregar tarea
                        </button>
                        <button type="button" class="btn btn-success btn-sm @_ocultaCompleta" style="background-color:#336666 !important;" @onclick="OnCompleteTaskClick">
                            <span class="oi oi-check"></span>&nbsp;&nbsp;Completar tarea
                        </button>
                        <button type="button" class="btn btn-success btn-sm @_ocultaEditar" style="background-color:#336666 !important;" @onclick="OnEditTaskClick">
                            <span class="oi oi-pencil"></span>&nbsp;&nbsp;Editar
                        </button>
                        <button type="button" class="btn btn-success btn-sm @_ocultaElimina" style="background-color:#336666 !important;" @onclick="OnRemoveTaskClick">
                            <span class="oi oi-trash"></span>&nbsp;&nbsp;Eliminar
                        </button>
                    </div>

                    <div class="col-12">
                        <Grid TItem="TaskVM" class="table table-sm table-hover table-bordered table-striped" DataProvider="TasksDataProvider"
                            AllowSorting="true" AllowPaging="true" AllowFiltering="true" PageSize="5" Responsive="true" EmptyText="No hay tareas"
                            AllowSelection="true" HeaderRowCssClass="bg-success text-white border-bottom-0" FiltersRowCssClass="bg-success text-white bg-opacity-25 border-bottom-0"
                            SelectedItemsChanged="OnSelectedItemsChanged">

                            <GridColumn TItem="TaskVM" HeaderText="" TextAlignment="Alignment.Center" FilterTextboxWidth="0" Filterable="false" Sortable="false" style="width:10%;">
                                @if (context.IsImportant)
                                {

                                    <button type="button" class="btn btn-light btn-sm" @onclick="() => OnImportantTaskClick(context)">
                                        <span class="oi oi-star" style="color:darkorange; font-size:1.3em;"></span>
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-light  btn-sm" @onclick="() => OnImportantTaskClick(context)">
                                        <span class="oi oi-star" style="color:dimgray; font-size:1.3em;"></span>
                                    </button>

                                }
                            </GridColumn>
                            <GridColumn TItem="TaskVM" HeaderText="Tarea" PropertyName="Name" StringComparison="StringComparison.Ordinal" style="width:60%;" Sortable="true" SortKeySelector="item => item.Name">
                                @context.Name
                            </GridColumn>
                            <GridColumn TItem="TaskVM" HeaderText="Fecha" PropertyName="RegisterDate" style="width:15%;" TextAlignment="Alignment.Center" Sortable="true" SortKeySelector="item => item.RegisterDate">
                                @context.RegisterDate.ToString("dd/MM/yyyy")
                            </GridColumn>
                            <GridColumn TItem="TaskVM" HeaderText="Estado" PropertyName="StateName" StringComparison="StringComparison.Ordinal" style="width:15%;" Sortable="true" SortKeySelector="item => item.StateName">
                                @if (context.StateId == (int)TaskState.Open)
                                {
                                    @context.StateName
                                }
                                else
                                {
                                    <span class="text-success" style="font-weight:bolder;">@context.StateName</span>
                                }
                            </GridColumn>
                        </Grid>
                    </div>
                }
            }
        </div>
    </div>
}



<Modal @ref="newGoal" Title="" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        <div class="row" style="background-color:#336666 !important; color:white; margin-top:-16px;">
            <div class="col-11" style="padding:10px; font-size:.8em;">
                Agregar nueva meta
            </div>
            <div class="col-1" style="padding:10px; text-align:right; font-size:.8em;">
                <span class="oi oi-x" @onclick="OnHideNewModalClick" style="cursor:pointer; font-size:.8em;"></span>
            </div>
        </div>
        <div style="padding:10px; width:100%;">
            <div class="row" style="margin-top:20px; margin-bottom:20px;">
                <div class="col-2" style="padding:5px;">
                    Nombre:
                </div>
                <div class="col-10" style="padding:5px;">
                    <InputText @bind-Value="@_adminGoal.Name" style="width:100%;" />
                </div>
            </div>
            <div class="row @visible">
                <div class="alert alert-danger" role="alert" style="font-size:.9em;">
                    @_message
                </div>
            </div>
            <div class="row" style="margin-top:10px; margin-bottom:10px;">
                <div class="col-12 text-center" style="padding:5px;">
                    <button type="button" class="btn btn-success btn-sm" style="background-color:#336666 !important; width:100px;" @onclick="OnSaveGoalModalClick">
                        Aceptar
                    </button>
                    &nbsp;&nbsp;
                    <button type="button" class="btn btn-secondary btn-sm" style="background-color:white !important; color:dimgray; width:100px;" @onclick="OnHideNewModalClick">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    </BodyTemplate>
</Modal>

<Modal @ref="removeGoal" Title="" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>        
        <div class="row" style="margin-top:40px; margin-bottom:30px;">
            <div class="col-12" style="padding:5px; font-size:2.5em; color:dimgray; text-align:center;">
                ¿Está seguro?
            </div>
            <div class="col-12" style="padding:5px; text-align:center;">
                Que desea eliminar el elemento <span style="font-weight:bold">@_currentGoal.Name</span>
            </div>
        </div>
        <div class="row" style="margin-top:20px; margin-bottom:20px;">
            <div class="col-12 text-center" style="padding:5px;">
                <button type="button" class="btn btn-success btn-sm" style="background-color:#336666 !important; width:100px;" @onclick="OnSaveRemoveModalClick">
                    Aceptar
                </button>
                &nbsp;&nbsp;
                <button type="button" class="btn btn-secondary btn-sm" style="background-color:white !important; color:dimgray; width:100px;" @onclick="OnHideRemoveModalClick">
                    Cancelar
                </button>
            </div>
        </div>
    </BodyTemplate>
</Modal>

<Modal @ref="newTask" Title="" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        <div class="row" style="background-color:#336666 !important; color:white; margin-top:-16px; ">
            <div class="col-11" style="padding:5px; font-size:.8em;">
                Agregar tarea
            </div>
            <div class="col-1" style="padding:5px; text-align:right; font-size:.8em;">
                <span class="oi oi-x" @onclick="OnHideNewTaskModalClick" style="cursor:pointer; font-size:.8em;"></span>
            </div>
        </div>
         <div style="padding:10px; width:100%;">
            <div class="row" style="margin-top:20px; margin-bottom:20px;">
                <div class="col-2" style="padding:5px;">
                    Nombre:
                </div>
                <div class="col-10" style="padding:5px;">
                    <InputText @bind-Value="@_currentTask.Name" style="width:100%;" />
                </div>
            </div>
            <div class="row @visible">
                <div class="alert alert-danger" role="alert" style="font-size:.9em;">
                    @_message
                </div>
            </div>
            <div class="row" style="margin-top:10px; margin-bottom:10px;">
                <div class="col-12 text-center" style="padding:5px;">
                    <button type="button" class="btn btn-success btn-sm" style="background-color:#336666 !important; width:100px;" @onclick="OnSaveTaskModalClick">
                        Aceptar
                    </button>
                    &nbsp;&nbsp;
                    <button type="button" class="btn btn-secondary btn-sm" style="background-color:white !important; color:dimgray; width:100px;" @onclick="OnHideNewTaskModalClick">
                        Cancelar
                    </button>
                </div>
            </div>
         </div>
    </BodyTemplate>
</Modal>

<Modal @ref="removeTask" Title="" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>        
        <div class="row" style="margin-top:20px; margin-bottom:30px;">
            <div class="col-12" style="padding:5px; font-size:2.5em; color:dimgray; text-align:center;">
                ¿Está seguro?
            </div>
            <div class="col-12" style="padding:5px; text-align:center;">
                Que desea eliminar el elemento <span style="font-weight:bold">@_currentTask.Name</span>
            </div>
        </div>
        <div class="row" style="margin-top:20px; margin-bottom:20px;">
            <div class="col-12 text-center" style="padding:5px;">
                <button type="button" class="btn btn-success btn-sm" style="background-color:#336666 !important; width:100px;" @onclick="OnSaveRemoveTaskClick">
                    Aceptar
                </button>
                &nbsp;&nbsp;
                <button type="button" class="btn btn-secondary btn-sm" style="background-color:white !important; color:dimgray; width:100px;" @onclick="OnHideRemoveTaskClick">
                    Cancelar
                </button>
            </div>
        </div>
    </BodyTemplate>
</Modal>

@code {

    [Inject] protected PreloadService PreloadService { get; set; } = default!;


    bool _findGoals = false;
    string visible = "d-none";
    string _message = string.Empty;
    string _respName = string.Empty;

    Grid<TaskVM> grid;

    private HashSet<TaskVM> selectedTasks = new();

    private List<GoalVM> _getGoals = new List<GoalVM>();
    private List<TaskVM> _getTasks = new List<TaskVM>();

    private GoalVM _currentGoal = new GoalVM();
    private GoalVM _adminGoal = new GoalVM();

    private TaskVM _currentTask = new TaskVM();

    private Modal newGoal = default!;
    private Modal removeGoal = default!;

    private Modal newTask = default!;
    private Modal removeTask = default!;

    private string _ocultaCompleta = "d-none";
    private string _ocultaEditar = "d-none";
    private string _ocultaElimina = "d-none";

    private string _selectedGoal = "backgroundcolor: ##336666; Opacity: 80%;";

    protected override Task OnInitializedAsync()
    {
        GetGoals();
        return base.OnInitializedAsync();
    }

    public async void GetGoals()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");
        _findGoals = false;
        try
        {
            var response = await _client.PostAsJsonAsync("admingoals/listgoals", new GoalVM() { Name = "T" });
            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                _getGoals = JsonConvert.DeserializeObject<List<GoalVM>>(responseBody);

                //Obtener las tareas de la primera meta si existe
                if (_getGoals != null && _getGoals.Count() > 0)
                {
                    _currentGoal = _getGoals.FirstOrDefault();
                    GetTasks();
                }
                //await InvokeAsync(StateHasChanged);
                _findGoals = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
        }
        PreloadService.Hide();
    }

    public async void GetTasks()
    {
        //GoalVM data
        try
        {
            //_currentGoal = data;
            var response = await _client.PostAsJsonAsync("admingoals/alltasks", new TaskVM() { GoalId = _currentGoal.Id, Name = "F" });
            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                _getTasks = JsonConvert.DeserializeObject<List<TaskVM>>(responseBody);

                //Obtener las tareas de la primera meta si existe
                if (_getTasks != null && _getTasks.Count() > 0)
                    _currentTask = _getTasks.FirstOrDefault();
                StateHasChanged();

                await grid.RefreshDataAsync();
            }
        }
        catch (Exception)
        {
        }
    }

    private async Task<GridDataProviderResult<TaskVM>> TasksDataProvider(GridDataProviderRequest<TaskVM> request)
    {
        if (_getTasks is null) GetTasks();
        return await Task.FromResult(request.ApplyTo(_getTasks));
    }

    private Task OnSelectedItemsChanged(HashSet<TaskVM> tasks)
    {
        _ocultaCompleta = "d-none";
        if (tasks.Count() == 0)
            _ocultaEditar = _ocultaElimina = "d-none";            

        //Con una que encuentre abierta muestra el boton de completar
        foreach (TaskVM item in tasks)
            if (item.StateId == (int)TaskState.Open)
                _ocultaCompleta = "";

        if(tasks.Count() > 0)
        {
            _ocultaEditar = _ocultaElimina = string.Empty;
            _currentTask = tasks.FirstOrDefault();
            _respName = _currentTask.Name;
        }
        selectedTasks = tasks is not null && tasks.Any() ? tasks : new();

        return Task.CompletedTask;
    }


    #region Agregar o editar una meta

    private async Task SelectedGoal(GoalVM data)
    {
        _currentGoal = data;
        _respName = data.Name;
        GetTasks();
    }

    private async Task OnNewGoalClick()
    {
        visible = "d-none";
        StateHasChanged();
        _respName = "";
        _adminGoal = new GoalVM();
        await newGoal.ShowAsync();
    }

    private async Task OnEditGoalClick(GoalVM data)
    {
        //Obtenemos el id y nombre de la meta
        _adminGoal = data;
        visible = "d-none";
        await newGoal.ShowAsync();
    }

    private async Task OnSaveGoalModalClick()
    {
        visible = "d-none";
        //Enviamos a la base de datos la aprobación para crear o editar la meta
        try
        {
            if(string.IsNullOrEmpty(_adminGoal.Name) || string.IsNullOrWhiteSpace(_adminGoal.Name))
            {
                visible = "";
                StateHasChanged();
            }
            else{
                GoalVM _goalData = new GoalVM()
                    {
                        Id = _adminGoal.Id,
                        Name = _adminGoal.Name,
                        Operation = _adminGoal.Id == 0 ? (int)OperationsList.New : (int)OperationsList.Update
                    };
                var response = await _client.PostAsJsonAsync("admingoals/savegoal", _goalData);
                //if (response.IsSuccessStatusCode)
                //    GetGoals();

                if (response.IsSuccessStatusCode)
                {
                    visible = "d-none";
                    await newGoal.HideAsync();
                    //GetGoals();
                    if (_adminGoal.Id == 0)
                        _getGoals.Add(_goalData);
                    //UpdateCurrentGoal();
                }
                else
                {
                    visible = "";
                    string responseBody = await response.Content.ReadAsStringAsync();
                    _message = JsonConvert.DeserializeObject<string>(responseBody);
                    _currentGoal.Name = _respName;
                }  
            }
        }
        catch (Exception)
        {
        }
    }

    private async Task OnHideNewModalClick()
    {
        visible = "d-none";
        await newGoal.HideAsync();
    }

    #endregion

    #region EliminarMeta

    private async Task OnRemoveGoalClick(GoalVM data)
    {
        //Obtenemos el id y el nombre de la meta a eliminar
        _currentGoal = new GoalVM() { Id = data.Id, Name = data.Name };
        await removeGoal.ShowAsync();
    }

    private async Task OnSaveRemoveModalClick()
    {
        //Enviamos la solicitud de eliminacion a la base de datos
        try
        {
            GoalVM _goalData = new GoalVM()
                {
                    Id = _currentGoal.Id,
                    Name = _currentGoal.Name,
                    Operation = (int)OperationsList.Delete
                };
            var response = await _client.PostAsJsonAsync("admingoals/savegoal", _goalData);
            if (response.IsSuccessStatusCode)
            {
                _getGoals.Remove(_currentGoal);
                _currentGoal = new GoalVM();
            }    
            await removeGoal.HideAsync();
        }
        catch (Exception)
        {
        }
    }

    private async Task OnHideRemoveModalClick()
    {
        await removeGoal.HideAsync();
    }

    #endregion


    #region Agregar o editar tarea

    private async void UpdateCurrentGoal()
    {
        try
        {
            var response = await _client.PostAsJsonAsync("admingoals/listgoals", _currentGoal);
            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                List<GoalVM> _newList = JsonConvert.DeserializeObject<List<GoalVM>>(responseBody);
                foreach (GoalVM item in _newList)
                {
                    _currentGoal.CompleteTasks = item.CompleteTasks;
                    _currentGoal.Tasks = item.Tasks;
                    _currentGoal.Progress = item.Progress;
                }
                StateHasChanged();
            }
        }
        catch (Exception)
        {
        }
    }

    private async Task OnNewTaskClick()
    {
        _respName = "";
        _currentTask = new TaskVM();
        await newTask.ShowAsync();
    }

    private async Task OnCompleteTaskClick()
    {
        PreloadService.Show(SpinnerColor.Light, "Completando tarea...");
        foreach (var emp in selectedTasks)
        {
            _currentTask = emp;
            _currentTask.StateId = (int)TaskState.Closed;
            _currentTask.StateName = EnumData.GetEnumDescription(TaskState.Closed);
            _currentTask.Operation = (int)OperationsList.Update;
            try
            {
                var response = await _client.PostAsJsonAsync("admingoals/savetask", _currentTask);
                UpdateCurrentGoal();
            }
            catch (Exception)
            {
            }
        }
        PreloadService.Hide();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnImportantTaskClick(TaskVM task)
    {
        PreloadService.Show(SpinnerColor.Light, "Guardando tarea...");
        task.IsImportant = task.IsImportant == true ? false : true;
        task.Operation = (int)OperationsList.Update;
        try
        {
            var response = await _client.PostAsJsonAsync("admingoals/savetask", task);
        }
        catch (Exception)
        {
        }
        PreloadService.Hide();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnEditTaskClick()
    {
        visible = "d-none";
        await newTask.ShowAsync();
    }

    private async Task OnSaveTaskModalClick()
    {
        visible = "d-none";
        PreloadService.Show(SpinnerColor.Light, "Guardando tarea...");
        //Enviamos a la base de datos la aprobación para crear o editar la meta
        try
        {
            TaskVM _taskData = new TaskVM()
                {
                    Id = _currentTask.Id,
                    Name = _currentTask.Name,
                    IsImportant = _currentTask.IsImportant,
                    StateId = _currentTask.StateId,
                    GoalId = _currentGoal.Id,
                    Operation = _currentTask.Id == 0 ? (int)OperationsList.New : (int)OperationsList.Update
                };
            var response = await _client.PostAsJsonAsync("admingoals/savetask", _taskData);
            if (response.IsSuccessStatusCode)
            {
                visible = "d-none";
                await newTask.HideAsync();
                //GetTasks();
                if(_currentTask.Id == 0)
                    _getTasks.Add(_taskData);
                UpdateCurrentGoal();
            }
            else
            {
                visible = "";
                string responseBody = await response.Content.ReadAsStringAsync();
                _message = JsonConvert.DeserializeObject<string>(responseBody);
                _currentTask.Name = _respName;
            }    
        }
        catch (Exception)
        {
        }
        PreloadService.Hide();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnHideNewTaskModalClick()
    {
        visible = "d-none";
        await newTask.HideAsync();
    }

    #endregion


    #region CompletarEliminarTarea

    private async Task OnRemoveTaskClick()
    {
        //Obtenemos el id y el nombre de la meta a eliminar
        foreach (TaskVM item in selectedTasks)
            _currentTask = item;
        await removeTask.ShowAsync();
    }

    private async Task OnSaveRemoveTaskClick()
    {
        PreloadService.Show(SpinnerColor.Light, "Eliminando tarea...");
        //Enviamos la solicitud de eliminacion a la base de datos
        try
        {
            TaskVM _taskData = new TaskVM()
                {
                    Id = _currentTask.Id,
                    Name = _currentTask.Name,
                    GoalId = _currentGoal.Id,
                    Operation = (int)OperationsList.Delete
                };
            var response = await _client.PostAsJsonAsync("admingoals/savetask", _taskData);
            if (response.IsSuccessStatusCode)
            {                
                _getTasks.Remove(_currentTask);
                _currentTask = new TaskVM();

                UpdateCurrentGoal();
            }

            await removeTask.HideAsync();
        }
        catch (Exception)
        {
        }
        PreloadService.Hide();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnHideRemoveTaskClick()
    {
        await removeTask.HideAsync();
    }

    #endregion
}